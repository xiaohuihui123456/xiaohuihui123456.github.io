<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>ThreadLocal原理分析</title>
      <link href="/2021/02/01/ThreadLocal%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/"/>
      <url>/2021/02/01/ThreadLocal%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="1-死锁"><a href="#1-死锁" class="headerlink" title="1.死锁"></a>1.死锁</h2><h3 id="死锁-活锁"><a href="#死锁-活锁" class="headerlink" title="死锁/活锁"></a>死锁/活锁</h3><ul><li>死锁： 一组互相竞争资源的线程因互相等待，导致“永久”阻塞的现象。</li><li>活锁： 活锁指的是任务或者执行者没有被阻塞，由于某些条件没有满足，导致一直重复尝试—失败—尝试—失败的过程。处于活锁的实体是在不断的改变状态，活锁有可能自行解开</li></ul><h3 id="死锁发生的条件"><a href="#死锁发生的条件" class="headerlink" title="死锁发生的条件"></a>死锁发生的条件</h3><p>这四个条件同时满足，就会产生死锁。</p><ul><li><p>互斥：共享资源 X 和 Y 只能被一个线程占用；</p></li><li><p>占有且等待：线程 T1 已经取得共享资源 X，在等待共享资源 Y 的时候，不释放共享资源 X；</p></li><li><p>不可抢占：其他线程不能强行抢占线程 T1 占有的资源；</p></li><li><p>循环等待：线程 T1 等待线程 T2 占有的资源，线程 T2 等待线程 T1 占有的资源，就是循环等待。</p></li></ul><h3 id="如何解决死锁问题"><a href="#如何解决死锁问题" class="headerlink" title="如何解决死锁问题"></a>如何解决死锁问题</h3><p>按照前面说的四个死锁的发生条件，我们只需要破坏其中一个，就可以避免死锁的产生。</p><p>其中，互斥这个条件我们没有办法破坏，因为我们用锁为的就是互斥，其他三个条件都有办法可以破坏。</p><ul><li>对于“占用且等待”这个条件，我们可以一次性申请所有的资源，这样就不存在等待了。</li><li>对于“不可抢占”这个条件，占用部分资源的线程进一步申请其他资源时，如果申请不到，可以主动释放它占有的资源，这样不可抢占这个条件就破坏掉了。</li><li>对于“循环等待”这个条件，可以靠按序申请资源来预防。所谓按序申请，是指资源是有线性顺序的，申请的时候可以先申请资源序号小的，再申请资源序号大的，这样线性化后自然就不存在循环了。</li></ul><h2 id="2-ThreadLocal"><a href="#2-ThreadLocal" class="headerlink" title="2.ThreadLocal"></a>2.ThreadLocal</h2><p>线程隔离机制。</p><p>ThreadLocal实际上一种线程隔离机制，也是为了保证在多线程环境下对于共享变量的访问的安全性。</p><pre><code class="java"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalTest</span> </span>{    <span class="keyword">static</span> ThreadLocal&lt;Integer&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;Integer&gt;(){        <span class="meta">@Override</span>        <span class="function"><span class="keyword">protected</span> Integer <span class="title">initialValue</span><span class="params">()</span> </span>{            <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//初始化一个值</span>        }    };    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{        Thread[] threads = <span class="keyword">new</span> Thread[<span class="number">5</span>];        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {            threads[i] = <span class="keyword">new</span> Thread(()-&gt;{                Integer num = threadLocal.get();                threadLocal.set(num+=<span class="number">5</span>);                System.out.println(Thread.currentThread().getName() + <span class="string">"-"</span> + num);            });        }        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {            threads[i].start();        }    }}</code></pre><h3 id="ThreadLocal结构"><a href="#ThreadLocal结构" class="headerlink" title="ThreadLocal结构"></a>ThreadLocal结构</h3><p>下图是本文介绍到的一些对象之间的引用关系图，实线表示强引用，虚线表示弱引用：</p><p><img src="https://raw.githubusercontent.com/xiaohuihui123456/picture/master/20210201120927.jpg" alt=""></p><p>下图是ThreadLocal与Thread的数据结构详细说明图：<br><img src="https://raw.githubusercontent.com/xiaohuihui123456/picture/master/20210201120957.jpg" alt=""></p><h3 id="ThreadLocal的hashCode"><a href="#ThreadLocal的hashCode" class="headerlink" title="ThreadLocal的hashCode"></a>ThreadLocal的hashCode</h3><p>在ThreadLocalMap中都需要根据索引i来进行get()，set()操作。</p><p>i的作用就是用来确定ThreadLocal实例对应的Thread中的ThreadLocalMap中的Entry数组的索引下标位置。</p><pre><code class="java"><span class="keyword">int</span> i = key.threadLocalHashCode &amp; (len-<span class="number">1</span>);</code></pre><p>这里关键的threadLocalHashCode。</p><p>下面仿照ThreadLocal来跑threadLocalHashCode。</p><h4 id="1-单线程，多实例化"><a href="#1-单线程，多实例化" class="headerlink" title="1.单线程，多实例化"></a>1.单线程，多实例化</h4><pre><code class="java"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalDemo</span> </span>{    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> threadLocalHashCode = nextHashCode();    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger nextHashCode = <span class="keyword">new</span> AtomicInteger();    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HASH_INCREMENT = <span class="number">0x61c88647</span>;    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">nextHashCode</span><span class="params">()</span> </span>{        <span class="keyword">return</span> nextHashCode.getAndAdd(HASH_INCREMENT);    }    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{        System.out.println(<span class="keyword">new</span> ThreadLocalDemo().threadLocalHashCode);        System.out.println(<span class="keyword">new</span> ThreadLocalDemo().threadLocalHashCode);        System.out.println(<span class="keyword">new</span> ThreadLocalDemo().threadLocalHashCode);        System.out.println(<span class="keyword">new</span> ThreadLocalDemo().threadLocalHashCode);    }}</code></pre><p>输出结果：</p><pre><code class="txt">01640531527-1013904242626627285</code></pre><h4 id="2-多线程，单实例化"><a href="#2-多线程，单实例化" class="headerlink" title="2.多线程，单实例化"></a>2.多线程，单实例化</h4><pre><code class="java"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalDemo</span> </span>{    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> threadLocalHashCode = nextHashCode();    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger nextHashCode = <span class="keyword">new</span> AtomicInteger();    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HASH_INCREMENT = <span class="number">0x61c88647</span>;    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">nextHashCode</span><span class="params">()</span> </span>{        <span class="keyword">return</span> nextHashCode.getAndAdd(HASH_INCREMENT);    }    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {            <span class="keyword">new</span> Thread(()-&gt;{                System.out.println(<span class="string">"threadName:"</span> + Thread.currentThread().getName() + <span class="string">"---&gt;"</span> + <span class="keyword">new</span> ThreadLocalDemo().threadLocalHashCode);            }).start();        }    }}</code></pre><p>输出结果：</p><pre><code class="txt">threadName:Thread-0---&gt;0threadName:Thread-4---&gt;-2027808484threadName:Thread-3---&gt;626627285threadName:Thread-2---&gt;-1013904242threadName:Thread-1---&gt;1640531527</code></pre><p>每次实例化都会生成不同的hashCode。<br>实际上就是通过魔数0x61c88647，来增加了AtomicInteger的自增值的散列性，大大减少了hashCode的碰撞（重复）。</p><p>将ThreadLocal对象和局部变量作为key-value，初始化一个Entry实例，并存储到数组里之前哈希映射到的位置。这样每次实例化ThreadLocal，就会生成不同的threadLocalHashCode，从而将Entry均匀的分布到数组table中。</p><h3 id="Thread源码分析"><a href="#Thread源码分析" class="headerlink" title="Thread源码分析"></a>Thread源码分析</h3><p><img src="https://raw.githubusercontent.com/xiaohuihui123456/picture/master/20210201120921.jpg" alt=""></p><p>####1.1 设置初始值</p><pre><code class="java"><span class="function"><span class="keyword">private</span> T <span class="title">setInitialValue</span><span class="params">()</span> </span>{    T value = initialValue();    Thread t = Thread.currentThread();    ThreadLocalMap map = getMap(t);    <span class="keyword">if</span> (map != <span class="keyword">null</span>)        map.set(<span class="keyword">this</span>, value);    <span class="keyword">else</span>        createMap(t, value);    <span class="keyword">return</span> value;}</code></pre><p>该方法为 private 方法，无法被重载。</p><p>首先，通过initialValue()方法获取初始值。该方法为 public 方法，且默认返回 null。所以典型用法中常常重载该方法。上例中即在内部匿名类中将其重载。</p><pre><code class="java"><span class="keyword">static</span> ThreadLocal&lt;Integer&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;Integer&gt;(){    <span class="meta">@Override</span>    <span class="function"><span class="keyword">protected</span> Integer <span class="title">initialValue</span><span class="params">()</span> </span>{        <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//初始化一个值</span>    }};</code></pre><p>然后拿到该线程对应的 ThreadLocalMap 对象。</p><ul><li>若该对象不为 null，则直接将该 ThreadLocal 对象与对应实例初始值的映射添加进该线程的 ThreadLocalMap中。</li><li>若为 null，则先创建该 ThreadLocalMap 对象再将映射添加其中。</li></ul><p>这里并不需要考虑 ThreadLocalMap 的线程安全问题。<br>因为每个线程有且只有一个 ThreadLocalMap 对象，并且只有该线程自己可以访问它，其它线程不会访问该 ThreadLocalMap，也即该对象不会在多个线程中共享，也就不存在线程安全的问题。</p><p>####1.2 set方法</p><pre><code class="java"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>{    Thread t = Thread.currentThread();    ThreadLocalMap map = getMap(t);    <span class="keyword">if</span> (map != <span class="keyword">null</span>)        map.set(<span class="keyword">this</span>, value);    <span class="keyword">else</span>        createMap(t, value);}</code></pre><pre><code class="java"><span class="function">ThreadLocalMap <span class="title">getMap</span><span class="params">(Thread t)</span> </span>{    <span class="keyword">return</span> t.threadLocals;}</code></pre><pre><code class="java"><span class="function"><span class="keyword">void</span> <span class="title">createMap</span><span class="params">(Thread t, T firstValue)</span> </span>{    t.threadLocals = <span class="keyword">new</span> ThreadLocalMap(<span class="keyword">this</span>, firstValue);}</code></pre><p>ThreadLocalMap的内部Code：</p><pre><code class="java">ThreadLocalMap(ThreadLocal&lt;?&gt; firstKey, Object firstValue) {    table = <span class="keyword">new</span> Entry[INITIAL_CAPACITY];    <span class="keyword">int</span> i = firstKey.threadLocalHashCode &amp; (INITIAL_CAPACITY - <span class="number">1</span>);    table[i] = <span class="keyword">new</span> Entry(firstKey, firstValue);    size = <span class="number">1</span>;    setThreshold(INITIAL_CAPACITY);}&lt;!--￼<span class="number">0</span>--&gt;###### 线性探测线性探测，是用来解决hash冲突的一种策略。它是一种开放寻址策略，我想大家应该都知道hash表，它是根据key进行直接访问的数据结构，也就是说我们可以通过hash函数把key映射到hash表中的一个位置来访问记录，从而加快查找的速度。存放记录的数据就是hash表（散列表）当我们针对一个key通过hash函数计算产生的一个位置，在hash表中已经被另外一个键值对占用时，那么线性探测就可以解决这个冲突，这里分两种情况：- 写入： 查找hash表中离冲突单元最近的空闲单元，把新的键值插入到这个空闲单元- 查找： 根据hash函数计算的一个位置处开始往后查找，指导找到与key对应的value或者找到空的单元。上面代码中第一个<span class="keyword">for</span>循环的处理过程：&lt;!--￼<span class="number">1</span>--&gt;![](https:<span class="comment">//raw.githubusercontent.com/xiaohuihui123456/picture/master/20210201120945.jpg)</span>上面代码中第二个<span class="keyword">for</span>循环的处理过程：&lt;!--￼<span class="number">2</span>--&gt;![](https:<span class="comment">//raw.githubusercontent.com/xiaohuihui123456/picture/master/20210201120939.jpg)</span>为什么要进行②替换位置呢？因为ThreadLocalMap的set方法进行完线性探索后有如下代码：![](https:<span class="comment">//raw.githubusercontent.com/xiaohuihui123456/picture/master/20210201120934.jpg)</span>如果不向前替换的话，就会在i索引位置设置这个新的值，这样在ThreadLocalMap中就会存在两个一样的Entry。所以需要位置替换。##### cleanSomeSlots```java<span class="comment">/**</span><span class="comment">  * Heuristically scan some cells looking for stale entries.</span><span class="comment">  * This is invoked when either a new element is added, or</span><span class="comment">  * another stale one has been expunged. It performs a</span><span class="comment">  * logarithmic number of scans, as a balance between no</span><span class="comment">  * scanning (fast but retains garbage) and a number of scans</span><span class="comment">  * proportional to number of elements, that would find all</span><span class="comment">  * garbage but would cause some insertions to take O(n) time.</span><span class="comment">  *     当添加一个新元素或一个过期元素被移除时，该方法会被调用，用来扫描一些槽的过期元素并清洗</span><span class="comment">  *     为了取得无扫描和全扫描之间的一个平衡，该方法使用对数扫描(也就是log)</span><span class="comment">  *     它将发现需要回收的元素同时可能导致插入操作的性能降低为O(n)</span><span class="comment">  * <span class="doctag">@param</span> i a position known NOT to hold a stale entry. The</span><span class="comment">  *     scan starts at the element after i. 从该槽点之后开始扫描（已知该槽点没有存储过期元素）</span><span class="comment">  * <span class="doctag">@param</span> n scan control: &lt;tt&gt;log2(n)&lt;/头秃&gt; cells are scanned,</span><span class="comment">  * unless a stale entry is found, in which case &lt;tt&gt;log2(table.length)-1&lt;/头秃&gt;</span><span class="comment">  * additional cells are scanned.When called from insertions,this parameter is the number</span><span class="comment">  * of elements, but when from replaceStaleEntry, it is the table length.</span><span class="comment">  *     log2(n)个槽点将被扫描，当插入时被调用，这指的是已有元素数量，当替换时被调用，指的是数组容量</span><span class="comment">  * But this version is simple, fast, and seems to work well.</span><span class="comment">  *     官方说这种写法简单、快速同时工作良好，读者可自行测试一番（主要跟n的权重有关）</span><span class="comment">  * <span class="doctag">@return</span> true if any stale entries have been removed.</span><span class="comment">  *     一旦有过期元素被移除，就返回true，表示至少有一个过期元素被清除成功</span><span class="comment">  */</span><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">cleanSomeSlots</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> n)</span> </span>{    <span class="keyword">boolean</span> removed = <span class="keyword">false</span>;    Entry[] tab = table;    <span class="keyword">int</span> len = tab.length;    <span class="comment">//这里跟skipList的跳跃思想有点类似，区别是跳跃表是空间换时间，这是就是简单的跳跃</span>    <span class="keyword">do</span> {        i = nextIndex(i, len);        Entry e = tab[i];        <span class="comment">//找到一个过期槽点(可能也是空槽点)</span>        <span class="keyword">if</span> (e != <span class="keyword">null</span> &amp;&amp; e.get() == <span class="keyword">null</span>) {            n = len;            removed = <span class="keyword">true</span>;<span class="comment">//找到一个过期槽点就标志成功</span>            <span class="comment">//但有个疑问就是此时并没有完成清洗操作，但文档描述称 have been removed</span>            i = expungeStaleEntry(i);        }    } <span class="keyword">while</span> ( (n &gt;&gt;&gt;= <span class="number">1</span>) != <span class="number">0</span>);<span class="comment">//2进制往右移动一位：即log2(n)</span>    <span class="comment">//简单回顾一下数学知识：2^n 的逆运算就是 log2(n)，不理解的读者请心中愧对中学数学老师3秒钟</span>    <span class="keyword">return</span> removed;}</code></pre><h5 id="expungeStaleEntry"><a href="#expungeStaleEntry" class="headerlink" title="expungeStaleEntry"></a>expungeStaleEntry</h5><p><code>`</code>java<br>/**</p><ul><li>Expunge a stale entry by rehashing any possibly colliding entries</li><li>lying between staleSlot and the next null slot. This also expunges</li><li>any other stale entries encountered before the trailing null.  </li><li>在当前过期槽点和下一个空槽点之间，移除过期元素</li><li>该方法主要干了两个事情：</li><li>1.清理当前过期槽</li><li>2.从下一个槽开始遍历数组，移除过期槽，一旦遇到空槽就停止：</li><li>2.1 当key为空时，移除过期槽</li><li>2.2 当key非空但rehash之后rehash之后下标变化则移除原槽，元素搬迁新空槽</li><li>@param staleSlot index of slot known to have null key</li><li>@return the index of the next null slot after staleSlot 返回过期槽后面第一个空槽下标</li><li>(all between staleSlot and this slot will have been checked for expunging).</li><li>在当前过期槽点和下一个空槽点之间所有过期元素都会被移除<br>*/<br>private int expungeStaleEntry(int staleSlot) {<br>Entry[] tab = table;<br>int len = tab.length;//注意是数组容量<br>// expunge entry at staleSlot 移除过期槽中的过期元素 加速GC<br>tab[staleSlot].value = null;//1.value help gc<br>tab[staleSlot] = null;//2.slot help gc<br>size–;<br>// Rehash until we encounter null 遍历数组并Rehash，直到遇到null时停止<br>Entry e;<br>int i;<br>//从当前过期槽的下一个槽开始遍历数组<br>for (i = nextIndex(staleSlot, len);<br>//根据(e = tab[i]) != null可知，一旦遇到空槽就停止<br> (e = tab[i]) != null; i = nextIndex(i, len)) {<br>ThreadLocal k = e.get();<br>//key是空就清除元素，防止内存泄露，help gc<br>if (k == null) {<pre><code>//为了防止内存泄露，当ThreadLocal已过期失效时，通过主动移除value和slot帮助加速GC//同时还可以空出一个空槽供后面使用，不浪费空间e.value = null;tab[i] = null;size--;</code></pre>} else {<pre><code>//当key已存在，则需要重新计算下标（为什么不叫index而叫h?）int h = k.threadLocalHashCode &amp; (len - 1);//当前后坐标不一致时（可能是扩容导致的 - 总之就是len变动导致下标变化）if (h != i) {    //清空原槽，元素搬迁到新的空槽，原槽提供给新元素使用    tab[i] = null;    // Unlike Knuth 6.4 Algorithm R, we must scan until    // null because multiple entries could have been stale.    // 一直往后找，直到找到一个空槽位置    while (tab[h] != null)        h = nextIndex(h, len);    tab[h] = e;}</code></pre>}<br>}<br>return i;<br>}<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 魔数0x61c88647与碰撞解决机智的读者肯定发现ThreadLocalMap并没有使用链表或红黑树去解决hash冲突的问题，而仅仅只是使用了数组来维护整个哈希表，那么重中之重的散列性要如何保证就是一个很大的考验。ThreadLocalMap通过结合三个巧妙的设计去解决这个问题：1. Entry的key设计成弱引用，因此key随时可能被GC（也就是失效快），尽量多的面对空槽2. (单个ThreadLocal时)当遇到碰撞时，通过线性探测的开放地址法解决冲突问题3. (多个ThreadLocal时)引入了神奇的0x61c88647，增强其的散列性，大大减少碰撞几率之所以不用累加而用魔数，笔者认为可能跟其找最近的空槽有关（跳跃查找比自增1查找用来找空槽可能更有效一些，因为有了更多可选择的空间spreading out），同时也跟其良好的散列性有关。</span><br><span class="line"></span><br><span class="line">### ThreadLocal与内存泄露#### ThreadLocal导致内存泄露的错误行为1. 使用static的ThreadLocal，延长了ThreadLocal的生命周期，可能导致内存泄漏2. 分配使用了ThreadLocal又不再调用get()，set()，remove()方法 就会导致内存泄漏3. 当使用线程池时，即当前线程不一定会退出（比如固定大小的线程池），这样将一些大对象设置到ThreadLocal中，可能会导致系统出现内存泄露（当对象不再使用时，因为引用存在，无法被回收）#### ThreadLocal导致内存泄露的根源首先需要明确一点：ThreadLocal本身的设计是不会导致内存泄露的，原因更多是使用不当导致的！ThreadLocalMap对象被Thread对象所持有，当线程退出时，Thread类执行清理操作，比如清理ThreadLocalMap；否则该ThreadLocalMap对象的引用并不会被回收。**根源**：由于Entry的key弱引用特性（见注意），当每次GC时JVM会主动将无用的弱引用回收掉，因此当ThreadLocal外部没有强引用依赖时，就会被自动回收，这样就可能造成当ThreadLocal被回收时，相当于将Map中的key设置为null，但问题是该key对应的entry和value并不会主动被GC回收。当Entry和value未被主动回收时，除非当前线程死亡，否则线程对于Entry的强引用会一直存在，从而导致内存泄露。**建议**： 当希望回收对象，最好使用ThreadLocal.remove()方法将该变量主动移除，告知JVM执行GC回收**注意**：ThreadLocal本身不是弱引用的，Entry继承了WeakReference，同时Entry又将自身的key封装成弱引用，所有真正的弱引用是Entry的key，只不过恰好Entry的key是ThreadLocal！！```javastatic class Entry extends WeakReference&lt;ThreadLocal&lt;?&gt;&gt; &#123;    Object value;    Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;        //这里才是真正的弱引用！！        super(k);//将key变成了弱引用！而key恰好又是ThreadLocal！        value = v;    &#125;&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="ThreadLocal总结"><a href="#ThreadLocal总结" class="headerlink" title="ThreadLocal总结"></a>ThreadLocal总结</h3><ul><li><p>ThreadLocal 并不解决线程间共享数据的问题</p></li><li><p>ThreadLocal 通过隐式的在不同线程内创建独立实例副本避免了实例线程安全的问题</p></li><li><p>每个线程持有一个 Map 并维护了 ThreadLocal 对象与具体实例的映射，该 Map 由于只被持有它的线程访问，故不存在线程安全以及锁的问题</p></li><li><p>ThreadLocalMap 的 Entry 对 ThreadLocal 的引用为弱引用，避免了 ThreadLocal 对象无法被回收的问题</p></li><li><p>ThreadLocalMap 的 set 方法通过调用 replaceStaleEntry 方法回收key为 null 的 Entry 对象的value（即为具体实例）以及 Entry 对象本身，从而防止内存泄漏</p></li><li><p>ThreadLocal 适用于变量在线程间隔离且在方法间共享的场景</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mycat高可用方案</title>
      <link href="/2019/09/29/mycat%E9%AB%98%E5%8F%AF%E7%94%A8%E6%96%B9%E6%A1%88/"/>
      <url>/2019/09/29/mycat%E9%AB%98%E5%8F%AF%E7%94%A8%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h2 id="1-高可用方案"><a href="#1-高可用方案" class="headerlink" title="1. 高可用方案"></a>1. 高可用方案</h2><h3 id="方案一：keepalived-haproxy-mycat-不满足"><a href="#方案一：keepalived-haproxy-mycat-不满足" class="headerlink" title="方案一：keepalived+haproxy+mycat(不满足)"></a>方案一：keepalived+haproxy+mycat(不满足)</h3><p><img src="/2019/09/29/mycat高可用方案/15697342559870.jpg" alt="keepalived+haproxy+mycat"></p><p>mycat官方推荐的方案，之前ECS通过HAVIP可以实现，但是目前阿里云不提供HAVIP服务</p><h3 id="方案二：通过spring的AOP实现软负载（不满足）"><a href="#方案二：通过spring的AOP实现软负载（不满足）" class="headerlink" title="方案二：通过spring的AOP实现软负载（不满足）"></a>方案二：通过spring的AOP实现软负载（不满足）</h3><p><img src="/2019/09/29/mycat高可用方案/15697343734810.jpg" alt="通过spring的AOP实现软负载"></p><p>业务代码无侵入性，但是需要自己实现负载均衡算法以及心跳检查方案，需要开发成本</p><h3 id="方案三：阿里云SLB-haproxy-mycat"><a href="#方案三：阿里云SLB-haproxy-mycat" class="headerlink" title="方案三：阿里云SLB+haproxy+mycat"></a>方案三：阿里云SLB+haproxy+mycat</h3><p><img src="/2019/09/29/mycat高可用方案/15697345043104.jpg" alt="阿里云SLB+haproxy+mycat"></p><p>使用阿里云的<code>SLB</code>主要是做主备（保证<code>haproxy</code>的高可用），使用<code>haproxy</code>做<code>mycat</code>的负载均衡。</p><p>缺点：阿里云的<code>SLB</code>对于私网的最大连接数5000、每秒新建最大连接数3000、<code>QPS</code>是1000的规格是免费的，可能后续还会收费。</p><hr><p>为什么不用阿里<code>SLB</code>直接负载均衡<code>mycat</code>呢？<br>刚开始设计架构的时候用的就是基于<code>SLB</code>做负载均衡，在项目运行一段时间后，发现<code>MySql</code>数据库服务器的<code>TCP</code>连接源源不断的增加，并且不会自我释放连接。经过研究发现，<code>MyCat</code>在接收到<code>SLB</code>发送的健康检查心跳的指令时，会把非<code>mysql</code>协议的指令直接发送给真实的<code>mysql</code>服务器，会建立大量<code>MsqlIO</code>连接，而<code>mysql</code>数据库无法识别这些指令就导致数据库连接泄露，这也算是<code>Mycat</code>的一个<code>Bug</code>，目前<code>Mycat</code>还没有解决该问题。</p><h3 id="方案四：mysql的LB协议（最终选定的方案）"><a href="#方案四：mysql的LB协议（最终选定的方案）" class="headerlink" title="方案四：mysql的LB协议（最终选定的方案）"></a>方案四：mysql的LB协议（最终选定的方案）</h3><p><img src="/2019/09/29/mycat高可用方案/15697347234707.jpg" alt="mysql的LB协议"><br>基于<code>MySql Connector/J</code> java连接器的<code>LoadBalancing</code>协议，进行负载均衡。</p><p>URL格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbc:mysql:loadbalance:<span class="comment">//[host]:[port],[host]:[port],...[/database]?[property=&lt;value&gt;]&amp;[property=&lt;value&gt;]</span></span><br></pre></td></tr></table></figure><p><code>url</code>中的每个<code>host</code>都是平等的主<code>host</code>，当客户端获取连接时会有两种<code>random</code>(默认随机)和<code>bestResponseTime</code>(最小响应时间)两种均衡策略，可以在参数<code>loadBalanceStrategy</code>中指定。</p><p>与其他方案相比：</p><ol><li>部署过程简单，成本低</li><li>通过mysql的jdbc驱动实现负载均衡，比较稳定</li></ol><p>具体内容参看：</p><ol><li>mweb中的《mysql的LB协议》</li><li><a href="https://dev.mysql.com/doc/connector-j/5.1/en/connector-j-usagenotes-j2ee-concepts-managing-load-balanced-connections.html" target="_blank" rel="noopener">Configuring Load Balancing with Connector/J</a></li></ol><p>参考博客：<br><a href="https://www.cnblogs.com/telwanggs/p/10733801.html" target="_blank" rel="noopener">基于mycat高可用方案——数据库负载</a></p><p><a href="https://dwj999.github.io/Aliyun-ECS%E6%90%AD%E5%BB%BAMHA-Keepalived-VIP-MySQL5-7.html" target="_blank" rel="noopener">Aliyun ECS搭建MHA+Keepalived+VIP+MySQL5.7</a></p><p><a href="https://blog.espnlol.com/?p=156" target="_blank" rel="noopener">SLB Haproxy Mycat代理mysql分库分表，读写分离</a></p><p><a href="http://www.023dns.com/server_ECS/1212.html" target="_blank" rel="noopener">SLB+ECS实现高可用加负载均衡haproxy</a></p><h2 id="2-新租户入驻问题"><a href="#2-新租户入驻问题" class="headerlink" title="2.新租户入驻问题"></a>2.新租户入驻问题</h2><p>通过zk来管理mycat集群的配置文件。</p><h3 id="2-1-初始化步骤"><a href="#2-1-初始化步骤" class="headerlink" title="2.1 初始化步骤"></a>2.1 初始化步骤</h3><h4 id="（1）将mycat安装到三个服务器中"><a href="#（1）将mycat安装到三个服务器中" class="headerlink" title="（1）将mycat安装到三个服务器中"></a>（1）将mycat安装到三个服务器中</h4><h4 id="（2）修改这三个服务器中mycat的mycat-conf-myid-properties配置文件"><a href="#（2）修改这三个服务器中mycat的mycat-conf-myid-properties配置文件" class="headerlink" title="（2）修改这三个服务器中mycat的mycat/conf/myid.properties配置文件"></a>（2）修改这三个服务器中mycat的<code>mycat/conf/myid.properties</code>配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">loadZk=true</span><br><span class="line"># zk集群地址，多个用&quot;,&quot;隔开</span><br><span class="line">zkURL=127.0.0.1:2181</span><br><span class="line"># zk集群内Mycat集群ID(自定义)</span><br><span class="line">clusterId=mycat-cluster-1</span><br><span class="line"># Mycat集群内本实例ID，禁止重复</span><br><span class="line">myid=mycat_fz_01</span><br><span class="line"># Mycat集群内节点个数</span><br><span class="line">clusterSize=3</span><br><span class="line"># 把所有集群中的所有mycat服务器罗列进行以逗号隔开</span><br><span class="line">clusterNodes=mycat_fz_01,mycat_fz_02,mycat_fz_03</span><br><span class="line">#server  booster  ;   booster install on db same server,will reset all minCon to 1</span><br><span class="line">type=server</span><br><span class="line">boosterDataHosts=dataHost1</span><br></pre></td></tr></table></figure><p><code>type</code>和<code>boosterDataHosts</code>参数说明：<br><code>type</code> 有两个选项：<code>server</code> 与 <code>booster</code>。</p><p>其中 <code>server</code> 是普通的 <code>mycat</code> 节点，<code>booster</code> 节点负责全量导出，不做业务，只用于迁移。<br><code>booster</code> 节点是与 <code>mysql</code> 节点部署在同一台机器的 <code>mycat</code> 节点，一旦设置 <code>booster</code>，<code>Schema.xml</code>中 <code>dataHost</code> 标签中的 <code>minCon</code> 属性会被覆盖设置为 <code>2</code>，<code>minCon</code> 属性是指定每个读写实例连接池的最小连接，初始化连接池的大小。与之相关的一个设置是 <code>dataHost</code> 的 <code>maxCon</code> 数量，这个数量留给用户限制最大连接数。</p><p>为什么要把连接数最小值覆盖为2？<br>原因是 <code>booster</code> 节点可以平时就可以部署运行，但是它本身并不能占用过多连接导致影响<code>mysql</code> 节点运行业务，但是考虑到一旦运行迁移任务又会占用很多连接，所以 <code>maxCon</code> 需要设置一个合理的值以减少对 <code>mysql</code> 节点的影响，一个可以约束的范围是一个 <code>mysql</code> 节点的对应的所有 <code>dataHost</code> 的 <code>maxCon</code> 加起来不超过这个 <code>mysql</code> 的最大连接数。另外，与减少 <code>mysql</code> 影响的设置还有 <code>dataHost</code> 的 <code>slaveIDs</code> 的设置。</p><p><code>boosterDataHosts</code> 代表本 <code>mycat booster</code> 节点负责哪些 <code>dataHost</code> 的迁移工作，支持多个 <code>DataHost</code>，以英文逗号分隔，迁移任务所需的 <code>dataHost</code> 需要在此写清楚，并且与 <code>schema.xml</code>(即 zookeeper 中的 schema)中的<code>dataNode</code> 节点中的 <code>DataHost</code> 属性对应。如果迁移用到 <code>dataHost</code> 不在 <code>boosterDataHosts</code> 里。涉及的<code>dataHost</code> 将不会运行迁移任务。</p><h4 id="（3）修改mycat-conf-zkconf中的配置文件"><a href="#（3）修改mycat-conf-zkconf中的配置文件" class="headerlink" title="（3）修改mycat\conf\zkconf中的配置文件"></a>（3）修改<code>mycat\conf\zkconf</code>中的配置文件</h4><p>根据具体情况修改<code>schema.xml</code>、<code>server.xml</code>、<code>rule.xml</code>等配置文件。</p><h4 id="（4）执行将zkconf中的配置同步到zk的脚本："><a href="#（4）执行将zkconf中的配置同步到zk的脚本：" class="headerlink" title="（4）执行将zkconf中的配置同步到zk的脚本："></a>（4）执行将zkconf中的配置同步到zk的脚本：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh /usr/local/software/mycat/bin/init_zk_data.sh</span><br></pre></td></tr></table></figure><h4 id="（5）启动mycat集群"><a href="#（5）启动mycat集群" class="headerlink" title="（5）启动mycat集群"></a>（5）启动mycat集群</h4><h3 id="2-2-新租户入驻步骤"><a href="#2-2-新租户入驻步骤" class="headerlink" title="2.2 新租户入驻步骤"></a>2.2 新租户入驻步骤</h3><h4 id="（1）修改mycat-conf-zkconf中的配置文件"><a href="#（1）修改mycat-conf-zkconf中的配置文件" class="headerlink" title="（1）修改mycat/conf/zkconf中的配置文件"></a>（1）修改<code>mycat/conf/zkconf</code>中的配置文件</h4><p>根据具体情况修改<code>schema.xml</code>、<code>server.xml</code>、<code>rule.xml</code>等配置文件。</p><h4 id="（2）执行将zkconf中的配置同步到zk的脚本："><a href="#（2）执行将zkconf中的配置同步到zk的脚本：" class="headerlink" title="（2）执行将zkconf中的配置同步到zk的脚本："></a>（2）执行将zkconf中的配置同步到zk的脚本：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh /usr/local/software/mycat/bin/init_zk_data.sh</span><br></pre></td></tr></table></figure><p>参考博客：<br><a href="https://www.cnblogs.com/leeSmall/p/9551038.html" target="_blank" rel="noopener">Mysql系列九：使用zookeeper管理远程Mycat配置文件、Mycat监控、Mycat数据迁移（扩容）</a></p><p><a href="https://blog.51cto.com/ygqygq2/1974592" target="_blank" rel="noopener">Mycat学习实战-Mycat的zookeeper集群模式</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> mycat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>多线程处理List</title>
      <link href="/2018/10/14/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%A4%84%E7%90%86List/"/>
      <url>/2018/10/14/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%A4%84%E7%90%86List/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> cn.com.git.ncl.aplus.components.batch.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.com.git.ncl.aplus.utils.JacksonUtils;</span><br><span class="line"><span class="keyword">import</span> cn.com.git.udmp.common.exception.ExceptionMessageHelper;</span><br><span class="line"><span class="keyword">import</span> cn.com.git.udmp.core.exception.app.BizException;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.concurrent.DefaultEventExecutorGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.concurrent.EventExecutorGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.concurrent.Future;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.concurrent.GenericFutureListener;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AplusAbstractThreadHandle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = Logger.getLogger(AplusAbstractThreadHandle.class);</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AgentProperties agentProperties;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常标志</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> exceptionFlag;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常信息集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; errMsgList;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置的线程数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer threadNum;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线程池  (20170822注释掉，把成员变量放到方法体内,防止并发操作线程死锁)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计数器  (20170822注释掉，把成员变量放到方法体内,防止并发操作线程死锁)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doThread</span><span class="params">(String legPerCod, String talDep, String opnDep,String batDate)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//抽象方法获取参数集合，各任务具体实现</span></span><br><span class="line">        List&lt;Object&gt; list = findDataList(legPerCod, talDep, opnDep, batDate);</span><br><span class="line">        <span class="keyword">int</span> count = list.size();</span><br><span class="line">        logger.info(<span class="string">"各个任务的参数集合list的大小："</span>+count);</span><br><span class="line">        <span class="keyword">if</span>(count == <span class="number">0</span>)&#123;</span><br><span class="line">        logger.info(<span class="string">"查询list集合为空，调用doThread方法直接返回，不进行多线程处理"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//初始化异常标志和集合</span></span><br><span class="line">        exceptionFlag = <span class="keyword">false</span>;</span><br><span class="line">        errMsgList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//获取配置的线程数</span></span><br><span class="line">        threadNum = agentProperties.getNumber();</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> == threadNum || threadNum &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BizException(<span class="string">"99999"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//初始化线程池 (20170822 把全局变量放到方法体内,防止并发操作线程死锁)</span></span><br><span class="line">        EventExecutorGroup eventExecutorGroup = <span class="keyword">new</span> DefaultEventExecutorGroup(threadNum);</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取步长，用于求每次的起始位置</span></span><br><span class="line">            <span class="keyword">int</span> step = list.size()/threadNum;</span><br><span class="line">            <span class="comment">//初始化计数器</span></span><br><span class="line">            CountDownLatch latch  = <span class="keyword">new</span> CountDownLatch(threadNum);</span><br><span class="line">            <span class="comment">//循环新建线程</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadNum; i++) &#123;  </span><br><span class="line">                </span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> ib =  i;</span><br><span class="line">                Callable&lt;Boolean&gt; task = <span class="keyword">new</span> Callable&lt;Boolean&gt;() &#123;</span><br><span class="line">        </span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        <span class="comment">//计算每个线程获取的参数集合起止位置</span></span><br><span class="line">                        <span class="keyword">int</span> strNum = ib*step;</span><br><span class="line">                        <span class="keyword">int</span> endNum;</span><br><span class="line">                        <span class="keyword">if</span>(ib == threadNum-<span class="number">1</span>)&#123;</span><br><span class="line">                            endNum = list.size();</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            endNum = step*(ib+<span class="number">1</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//获取当前线程处理的集合数据</span></span><br><span class="line">                        List&lt;Object&gt; subList = list.subList(strNum,endNum);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">for</span>(Object object : subList)&#123;</span><br><span class="line">                            <span class="comment">//业务逻辑处理</span></span><br><span class="line">                            doSingleThread(object, batDate, count);</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="comment">//提交线程处理，返回future</span></span><br><span class="line">                Future&lt;Boolean&gt; future = eventExecutorGroup.submit(task);</span><br><span class="line">                <span class="comment">//添加异常监听</span></span><br><span class="line">                addListener(future,latch);</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//等待所有子线程处理完毕</span></span><br><span class="line">                latch.await();</span><br><span class="line">                logger.error(<span class="string">"所有子线程已经处理完毕，主线程开始继续执行！！！！,CountDownLatch计数器的值是:"</span>+latch.getCount());</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                logger.error(e.toString());</span><br><span class="line">                logger.error(<span class="string">"主线程在等待子线程处理的过程中，出现了异常信息&#123;&#125;"</span>,e);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BizException(<span class="string">"99999"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//判断是否存在异常</span></span><br><span class="line">            <span class="keyword">if</span>(!errMsgList.isEmpty())&#123;</span><br><span class="line">            logger.error(<span class="string">"打印线程监听处理的的异常信息的值：exceptionFlag="</span>+exceptionFlag+<span class="string">"####errMsgList的大小="</span>+errMsgList.size());</span><br><span class="line">                String errMsg=<span class="string">"MainThreadThrowExceptionInfo"</span>;</span><br><span class="line">                <span class="keyword">for</span>(String srr : errMsgList)&#123;</span><br><span class="line">                    errMsg = errMsg +<span class="string">" ： "</span>+srr;</span><br><span class="line">                &#125;</span><br><span class="line">                logger.error(errMsg);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BizException(<span class="string">"99999"</span>,JacksonUtils.obj2Json(errMsg));</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭线程池</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != eventExecutorGroup) &#123;</span><br><span class="line">            logger.error(<span class="string">"开始回收线程池！！！！线程池信息："</span>+eventExecutorGroup.toString());</span><br><span class="line">                eventExecutorGroup.shutdownGracefully();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@title</span>查询需要处理的数据list抽象方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> legPerCod</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> talDep</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> opnDep</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> batDate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> List <span class="title">findDataList</span><span class="params">(String legPerCod, String talDep, String opnDep,String batDate)</span></span>;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@title</span>处理单条数据的抽象方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> batDate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doSingleThread</span><span class="params">(Object obj,String batDate,Integer listCount)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@title</span>添加异常监听事件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> future</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span>  <span class="keyword">void</span> <span class="title">addListener</span><span class="params">(Future&lt;Boolean&gt; future,CountDownLatch latch)</span> </span>&#123;</span><br><span class="line">        future.addListener(<span class="keyword">new</span> GenericFutureListener&lt;Future&lt;Boolean&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationComplete</span><span class="params">(Future&lt;Boolean&gt; future)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//正常返回值</span></span><br><span class="line">                    future.get();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                    <span class="comment">//异常捕获处理</span></span><br><span class="line">                    exceptionFlag = <span class="keyword">true</span>;</span><br><span class="line">                    logger.error(<span class="string">"SubThreadThrowExceptionInfo:"</span>+e);</span><br><span class="line">                    <span class="keyword">if</span>(e <span class="keyword">instanceof</span> BizException)&#123;</span><br><span class="line">                        BizException bex = (BizException)e; </span><br><span class="line">                        String errCod = bex.getErrCode();</span><br><span class="line">                        String errMsg = <span class="string">""</span>;</span><br><span class="line">                        <span class="keyword">if</span>(!StringUtils.isBlank(bex.getMessage()))&#123;</span><br><span class="line">                            errMsg = bex.getMessage();</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            errMsg = ExceptionMessageHelper.getExMsg(errCod);</span><br><span class="line">                        &#125;</span><br><span class="line">                        </span><br><span class="line">                        errMsgList.add(errCod+<span class="string">":"</span>+errMsg+<span class="string">":"</span>+e.toString());</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        errMsgList.add(e.toString());</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">                    <span class="comment">//计数器减一</span></span><br><span class="line">                    latch.countDown();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 多线程 高并发 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Master-Worker多线程模式</title>
      <link href="/2018/10/13/Master-Worker%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/10/13/Master-Worker%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="Master类"><a href="#Master类" class="headerlink" title="Master类"></a>Master类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.com.git.yaohui.MasterWorkerModel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentLinkedQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Master</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> workerCount = Runtime.getRuntime().availableProcessors();<span class="comment">//获取当前系统可用的线程数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//private int workerCount = 10;</span></span><br><span class="line"><span class="comment">//1 有一个盛放任务的容器</span></span><br><span class="line"><span class="keyword">private</span> ConcurrentLinkedQueue&lt;Task&gt; workQueue = <span class="keyword">new</span> ConcurrentLinkedQueue&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2 需要有一个盛放worker的集合</span></span><br><span class="line"><span class="keyword">private</span> HashMap&lt;String, Thread&gt; workers = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3 需要有一个盛放每一个worker执行任务的结果集合</span></span><br><span class="line"><span class="keyword">private</span> ConcurrentHashMap&lt;String, Object&gt; resultMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//4 构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Master</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"处理任务的线程数："</span> + workerCount);</span><br><span class="line">Worker worker = <span class="keyword">new</span> Worker();</span><br><span class="line">worker.setWorkQueue(<span class="keyword">this</span>.workQueue);</span><br><span class="line">worker.setResultMap(<span class="keyword">this</span>.resultMap);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; workerCount; i ++)&#123;</span><br><span class="line"><span class="keyword">this</span>.workers.put(Integer.toString(i), <span class="keyword">new</span> Thread(worker));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5 需要一个提交任务的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submit</span><span class="params">(Task task)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.workQueue.add(task);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//6 需要有一个执行的方法，启动所有的worker方法去执行任务</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;String, Thread&gt; me : workers.entrySet())&#123;</span><br><span class="line">me.getValue().start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//7 判断是否运行结束的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;String, Thread&gt; me : workers.entrySet())&#123;</span><br><span class="line"><span class="keyword">if</span>(me.getValue().getState() != Thread.State.TERMINATED)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//8 计算结果方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> priceResult = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;String, Object&gt; me : resultMap.entrySet())&#123;</span><br><span class="line">priceResult += (Integer)me.getValue();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> priceResult;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Worker类"><a href="#Worker类" class="headerlink" title="Worker类"></a>Worker类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.com.git.yaohui.MasterWorkerModel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentLinkedQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ConcurrentLinkedQueue&lt;Task&gt; workQueue;</span><br><span class="line"><span class="keyword">private</span> ConcurrentHashMap&lt;String, Object&gt; resultMap;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWorkQueue</span><span class="params">(ConcurrentLinkedQueue&lt;Task&gt; workQueue)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.workQueue = workQueue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResultMap</span><span class="params">(ConcurrentHashMap&lt;String, Object&gt; resultMap)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.resultMap = resultMap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">Task input = <span class="keyword">this</span>.workQueue.poll();</span><br><span class="line"><span class="keyword">if</span>(input == <span class="keyword">null</span>) <span class="keyword">break</span>;</span><br><span class="line">Object output = handle(input);</span><br><span class="line"><span class="keyword">this</span>.resultMap.put(Integer.toString(input.getId()), output);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">handle</span><span class="params">(Task input)</span> </span>&#123;</span><br><span class="line">Object output = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//处理任务的耗时。。 比如说进行操作数据库。。。</span></span><br><span class="line">Thread.sleep(<span class="number">500</span>);</span><br><span class="line">output = input.getPrice();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Task类"><a href="#Task类" class="headerlink" title="Task类"></a>Task类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.com.git.yaohui.MasterWorkerModel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> price ;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Main类"><a href="#Main类" class="headerlink" title="Main类"></a>Main类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.com.git.yaohui.MasterWorkerModel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Master master = <span class="keyword">new</span> Master();</span><br><span class="line"></span><br><span class="line">Random r = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)&#123;</span><br><span class="line">Task t = <span class="keyword">new</span> Task();</span><br><span class="line">t.setId(i);</span><br><span class="line">t.setPrice(r.nextInt(<span class="number">1000</span>));</span><br><span class="line">master.submit(t);</span><br><span class="line">&#125;</span><br><span class="line">master.execute();</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(master.isComplete())&#123;</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis() - start;</span><br><span class="line"><span class="keyword">int</span> priceResult = master.getResult();</span><br><span class="line">System.out.println(<span class="string">"最终结果："</span> + priceResult + <span class="string">", 执行时间："</span> + end);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">处理任务的线程数：<span class="number">4</span></span><br><span class="line">最终结果：<span class="number">47748</span>, 执行时间：<span class="number">12581</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mysql性能优化</title>
      <link href="/2018/09/28/mysql%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/2018/09/28/mysql%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库优化的目的"><a href="#数据库优化的目的" class="headerlink" title="数据库优化的目的"></a>数据库优化的目的</h2><h3 id="1-避免出现页面访问错误"><a href="#1-避免出现页面访问错误" class="headerlink" title="1.避免出现页面访问错误"></a>1.避免出现页面访问错误</h3><ul><li>由于数据库连接timeout产生页面5XX错误</li><li>由于慢查询造成页面无法加载</li><li>由于阻塞造成数据无法提交<h3 id="2-增加数据库的稳定性"><a href="#2-增加数据库的稳定性" class="headerlink" title="2.增加数据库的稳定性"></a>2.增加数据库的稳定性</h3></li><li>很多数据库问题都是由于低效的查询引起的<h3 id="3-优化用户体验"><a href="#3-优化用户体验" class="headerlink" title="3.优化用户体验"></a>3.优化用户体验</h3></li><li>流畅页面的访问速度</li><li>良好的网站功能体验</li></ul><h2 id="数据库优化的方面"><a href="#数据库优化的方面" class="headerlink" title="数据库优化的方面"></a>数据库优化的方面</h2><p><img src="/2018/09/28/mysql性能优化/1.png" alt="数据库优化的方面"></p><h2 id="SQL以及索引优化"><a href="#SQL以及索引优化" class="headerlink" title="SQL以及索引优化"></a>SQL以及索引优化</h2><h3 id="1-如何发现有问题的sql？"><a href="#1-如何发现有问题的sql？" class="headerlink" title="1. 如何发现有问题的sql？"></a>1. 如何发现有问题的sql？</h3><p>使用Mysql慢查询日志对有效率问题的sql进行监控：</p><ul><li>查看是否开启慢查询日志 ：<code>show variables like &#39;slow_query_log&#39;</code></li><li>设置开启慢查询日志：<code>set variables slow_query_log=on</code></li><li>查看慢查询日志文件位置：<code>show variables like &#39;slow_query_log_file&#39;</code></li><li>设置慢查询日志文件的位置：<code>set global slow_query_log_file=&#39;/home/mysql/sql_log/mysql-slow.log&#39;</code></li><li>设置没有使用到索引的记录到慢查询日志 ：<code>set global log_queries_not_using_indexes=on</code></li><li>查看超过多长时间的sql进行记录到慢查询日志： <code>show variables like &#39;long_query_time&#39;</code></li><li>设置慢查询的时间（单位：秒）（大于1s的查询记录到慢查询日志中）： <code>set long_query_time=1</code></li></ul><h3 id="2-慢查询日志的存储格式："><a href="#2-慢查询日志的存储格式：" class="headerlink" title="2. 慢查询日志的存储格式："></a>2. 慢查询日志的存储格式：</h3><p>慢查询日志所包含的内容：<br>执行sql的主机信息：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># <span class="selector-tag">User</span>@<span class="selector-tag">Host</span><span class="selector-pseudo">:root</span><span class="selector-attr">[root]</span> @ <span class="selector-tag">localhost</span> <span class="selector-attr">[]</span></span><br></pre></td></tr></table></figure><p>sql的执行信息：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># <span class="selector-tag">Query_time</span><span class="selector-pseudo">:0.000024</span>  <span class="selector-tag">Lock_time</span><span class="selector-pseudo">:0.000000</span>  <span class="selector-tag">Rows_sent</span><span class="selector-pseudo">:0</span> <span class="selector-tag">Rows_examined</span><span class="selector-pseudo">:0</span></span><br></pre></td></tr></table></figure><p>sql的执行时间：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET timestamp=1402389328</span><br></pre></td></tr></table></figure><p>sql内容：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">select</span> <span class="selector-tag">CONCAT</span>(<span class="string">'storage engine:'</span>,<span class="variable">@@storage_engine</span>) <span class="selector-tag">as</span> <span class="selector-tag">INFO</span>;</span><br></pre></td></tr></table></figure><h3 id="3-慢查询日志分析工具"><a href="#3-慢查询日志分析工具" class="headerlink" title="3. 慢查询日志分析工具"></a>3. 慢查询日志分析工具</h3><ol><li>mysqldumpslow（mysql官方慢查询日志分析工具）</li><li>pt-query-digest<br> 输出到文件：<code>pt-query-digest slow-log &gt; slow_log.report</code><br> 输出到数据库表：<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">pt-query-digest</span> <span class="selector-tag">slow</span><span class="selector-class">.log</span> <span class="selector-tag">-review</span> \</span><br><span class="line">h=127.0.0.1,D=test,p=root,P=3306,u=root,t=query_review \</span><br><span class="line"><span class="selector-tag">--</span> <span class="selector-tag">create-reviewtable</span>\</span><br><span class="line">-- review-history t= hostname_slow</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-通过慢查询日志分析有问题的sql"><a href="#4-通过慢查询日志分析有问题的sql" class="headerlink" title="4. 通过慢查询日志分析有问题的sql"></a>4. 通过慢查询日志分析有问题的sql</h3><ol><li>查询次数多且每次查询占用时间长的sql<br> 通常为pt-query-digest分析的前几个查询</li><li>IO大的sql<br> 注意pt-query-digest分析中的Rows examine项</li><li>未命中索引的sql<br> 注意pt-query-digest分析中Rows examine和Rows Send的对比<br> （Rows examine表示扫描的行数，Rows Send表示实际发送出来的行数）<h3 id="5-如何分析sql查询"><a href="#5-如何分析sql查询" class="headerlink" title="5. 如何分析sql查询"></a>5. 如何分析sql查询</h3>使用explain或者desc查询sql的执行计划：</li></ol><p><img src="/2018/09/28/mysql性能优化/12.png" alt="sql执行计划"></p><p>explain各列的含义:</p><ul><li>table：显示这一行的数据是关于哪张表的</li><li>type：这是重要的列，显示连接使用了何种类型。最好到最差的连接类型为：const、eq_reg、ref、range、index、all<ul><li>const：常数查找，一般对于主键或唯一索引都是常数查找</li><li>eq_reg：是一种范围查找，一般是对于主键或唯一索引的范围查找</li><li>ref：常见于连接的查询中，比如一个表是基于某一个索引的查找</li><li>range：是基于索引的范围查找</li><li>index：是对于索引的扫描</li><li>all：对表扫描</li></ul></li><li>possible_key：显示可能应用到这张表中的索引。如果为空，没有可能的索引</li><li>key：实际使用的索引。如果为null，则没有使用索引</li><li>key_len：使用的索引的长度。在不损失精确性的情况下，长度越短越好</li><li>ref：显示索引的哪一列被使用了，如果可能的话，是一个常数</li><li>rows：mysql认为必须检查的用来返回请求数据的行数</li><li>extra：这一列中需要注意的返回值：<ul><li>Using filesort：看到这个的时候，查询就需要优化了。mysql需要进行额外的步骤来发现如何对返回的行排序。它根据连接类型以及存储排序键值和匹配条件的全部行的行指针来排序全部行。</li><li>Using temporary：看到这个的时候，查询需要优化了。这里，mysql需要创建一个临时表来存储结果，这通常发生在对不同的列集进行order by上，而不是group by上。</li></ul></li></ul><h3 id="6-sql优化的例子："><a href="#6-sql优化的例子：" class="headerlink" title="6. sql优化的例子："></a>6. sql优化的例子：</h3><ol><li>count()和max()的优化方法:</li></ol><p><img src="/2018/09/28/mysql性能优化/2.png" alt="优化前执行计划"><br><strong>优化方法：</strong><br>对count或者max的列加索引：<code>create index idx_payment_date on payment(payment_date);</code></p><p><img src="/2018/09/28/mysql性能优化/3.png" alt="优化后执行计划"></p><p>注意：count的常犯错误：count(*)的结果是包含null的，count(列名)的结果是不包含该列为null的。</p><ol start="2"><li>子查询的优化：<br> 通常情况下，需要把子查询优化为join查询，但在优化时要注意关联键是否有一对多的关系，要注意重复数据。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t <span class="keyword">where</span> t.id <span class="keyword">in</span> (<span class="keyword">select</span> t1.id <span class="keyword">from</span> t1);</span><br></pre></td></tr></table></figure></li></ol><p>优化后：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> t.* <span class="keyword">from</span> t <span class="keyword">join</span> t1 <span class="keyword">where</span> t.id=t1.id;</span><br></pre></td></tr></table></figure><ol start="3"><li>group by的优化：</li></ol><p>查询每个演员所参演的电影的数量：</p><p><img src="/2018/09/28/mysql性能优化/4.png" alt="优化前执行计划"></p><p>优化后：</p><p><img src="/2018/09/28/mysql性能优化/5.png" alt="优化后执行计划"></p><ol start="4"><li>limit的优化：</li></ol><p>limit常用于分页处理，时常会伴随order by从句使用，因此大多时候会使用Filesorts这样会造成大量的IO问题。</p><p><img src="/2018/09/28/mysql性能优化/6.png" alt="优化前执行计划"></p><p>优化方法1：使用有索引的列或主键进行order by操作</p><p><img src="/2018/09/28/mysql性能优化/7.png" alt="优化后执行计划"></p><p>优化方法2：记录上次返回的主键，在下次查询时使用主键过滤</p><p><img src="/2018/09/28/mysql性能优化/8.png" alt="再次优化后执行计划"></p><h3 id="7-如何选择合适的列建立索引"><a href="#7-如何选择合适的列建立索引" class="headerlink" title="7. 如何选择合适的列建立索引"></a>7. 如何选择合适的列建立索引</h3><ol><li>在where从句，group by从句，order by从句，on从句中出现的列</li><li>索引字段越小越好</li><li>离散度大的列放到联合索引的前面<br>eg：</li></ol><p><img src="/2018/09/28/mysql性能优化/9.png" alt="优化前"></p><p>这里index(staff_id,customer_id)和index(customer_id,staff_id)两个索引那个更好呢？<br>答：取决于staff_id和customer_id列的离散度，离散度越高的放到联合索引的前边</p><p>如何判断列的离散程度：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> customer_id),<span class="keyword">count</span>(<span class="keyword">distinct</span> staff_id) <span class="keyword">from</span> payment;</span><br></pre></td></tr></table></figure><p><img src="/2018/09/28/mysql性能优化/10.png" alt="enter description here"></p><p>统计的列的数据越大，离散度越高。<br>这里由于customer_id的离散度更大，所以应该创建index(customer_id,staff_id)的联合索引</p><h3 id="8-索引的维护和优化"><a href="#8-索引的维护和优化" class="headerlink" title="8. 索引的维护和优化"></a>8. 索引的维护和优化</h3><p>使用pt-duplicate-key-checker工具查询重复及冗余索引：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pt-duplicate-key-checker -uroot -p123 -h127.0.0.1</span><br></pre></td></tr></table></figure><h2 id="表结构的优化"><a href="#表结构的优化" class="headerlink" title="表结构的优化"></a>表结构的优化</h2><h3 id="1-选择合适的数据类型"><a href="#1-选择合适的数据类型" class="headerlink" title="1. 选择合适的数据类型"></a>1. 选择合适的数据类型</h3><ol><li>使用可以存下你的数据的最小的数据类型</li><li>使用简单的数据类型。Int要比varchar类型在mysql处理上简单</li><li>尽可能的使用 not null 定义字段，并给出默认值</li><li>尽量少用text类型，非用不可时最好考虑分表</li></ol><p>使用int来存储日期时间，利用from_unixtime()和unix_timestamp()两个函数来进行转换。<br>eg:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">test</span>(<span class="keyword">id</span> <span class="built_in">int</span> auto_increment <span class="keyword">not</span> <span class="literal">null</span>,timstr <span class="built_in">int</span>, primary <span class="keyword">key</span>(<span class="keyword">id</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">test</span>(timestr) <span class="keyword">values</span> (<span class="keyword">unix_timestamp</span>(<span class="string">'2018-09-05'</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> from_unixtime(timestr) <span class="keyword">from</span> <span class="keyword">test</span>;</span><br></pre></td></tr></table></figure><p>使用bigint来存储ip地址，利用inet_aton(),inet_ntoa()两个函数来进行转换。<br>eg:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> sessions(<span class="keyword">id</span> <span class="built_in">int</span> auto_increment <span class="keyword">not</span> <span class="literal">null</span>,ipaddress <span class="built_in">bigint</span>,primary <span class="keyword">key</span>(<span class="keyword">id</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> sessions(ipaddress) <span class="keyword">values</span> (<span class="keyword">inet_aton</span>(<span class="string">'192.168.1.1'</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">inet_ntoa</span>(ipaddress) <span class="keyword">from</span> sessions;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
