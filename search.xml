<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>多线程处理List</title>
      <link href="/2018/10/14/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%A4%84%E7%90%86List/"/>
      <url>/2018/10/14/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%A4%84%E7%90%86List/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> cn.com.git.ncl.aplus.components.batch.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.com.git.ncl.aplus.utils.JacksonUtils;</span><br><span class="line"><span class="keyword">import</span> cn.com.git.udmp.common.exception.ExceptionMessageHelper;</span><br><span class="line"><span class="keyword">import</span> cn.com.git.udmp.core.exception.app.BizException;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.concurrent.DefaultEventExecutorGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.concurrent.EventExecutorGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.concurrent.Future;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.concurrent.GenericFutureListener;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AplusAbstractThreadHandle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = Logger.getLogger(AplusAbstractThreadHandle.class);</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AgentProperties agentProperties;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常标志</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> exceptionFlag;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常信息集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; errMsgList;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置的线程数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer threadNum;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线程池  (20170822注释掉，把成员变量放到方法体内,防止并发操作线程死锁)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计数器  (20170822注释掉，把成员变量放到方法体内,防止并发操作线程死锁)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doThread</span><span class="params">(String legPerCod, String talDep, String opnDep,String batDate)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//抽象方法获取参数集合，各任务具体实现</span></span><br><span class="line">        List&lt;Object&gt; list = findDataList(legPerCod, talDep, opnDep, batDate);</span><br><span class="line">        <span class="keyword">int</span> count = list.size();</span><br><span class="line">        logger.info(<span class="string">"各个任务的参数集合list的大小："</span>+count);</span><br><span class="line">        <span class="keyword">if</span>(count == <span class="number">0</span>)&#123;</span><br><span class="line">        logger.info(<span class="string">"查询list集合为空，调用doThread方法直接返回，不进行多线程处理"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//初始化异常标志和集合</span></span><br><span class="line">        exceptionFlag = <span class="keyword">false</span>;</span><br><span class="line">        errMsgList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//获取配置的线程数</span></span><br><span class="line">        threadNum = agentProperties.getNumber();</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> == threadNum || threadNum &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BizException(<span class="string">"99999"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//初始化线程池 (20170822 把全局变量放到方法体内,防止并发操作线程死锁)</span></span><br><span class="line">        EventExecutorGroup eventExecutorGroup = <span class="keyword">new</span> DefaultEventExecutorGroup(threadNum);</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取步长，用于求每次的起始位置</span></span><br><span class="line">            <span class="keyword">int</span> step = list.size()/threadNum;</span><br><span class="line">            <span class="comment">//初始化计数器</span></span><br><span class="line">            CountDownLatch latch  = <span class="keyword">new</span> CountDownLatch(threadNum);</span><br><span class="line">            <span class="comment">//循环新建线程</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadNum; i++) &#123;  </span><br><span class="line">                </span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> ib =  i;</span><br><span class="line">                Callable&lt;Boolean&gt; task = <span class="keyword">new</span> Callable&lt;Boolean&gt;() &#123;</span><br><span class="line">        </span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        <span class="comment">//计算每个线程获取的参数集合起止位置</span></span><br><span class="line">                        <span class="keyword">int</span> strNum = ib*step;</span><br><span class="line">                        <span class="keyword">int</span> endNum;</span><br><span class="line">                        <span class="keyword">if</span>(ib == threadNum-<span class="number">1</span>)&#123;</span><br><span class="line">                            endNum = list.size();</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            endNum = step*(ib+<span class="number">1</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//获取当前线程处理的集合数据</span></span><br><span class="line">                        List&lt;Object&gt; subList = list.subList(strNum,endNum);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">for</span>(Object object : subList)&#123;</span><br><span class="line">                            <span class="comment">//业务逻辑处理</span></span><br><span class="line">                            doSingleThread(object, batDate, count);</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="comment">//提交线程处理，返回future</span></span><br><span class="line">                Future&lt;Boolean&gt; future = eventExecutorGroup.submit(task);</span><br><span class="line">                <span class="comment">//添加异常监听</span></span><br><span class="line">                addListener(future,latch);</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//等待所有子线程处理完毕</span></span><br><span class="line">                latch.await();</span><br><span class="line">                logger.error(<span class="string">"所有子线程已经处理完毕，主线程开始继续执行！！！！,CountDownLatch计数器的值是:"</span>+latch.getCount());</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                logger.error(e.toString());</span><br><span class="line">                logger.error(<span class="string">"主线程在等待子线程处理的过程中，出现了异常信息&#123;&#125;"</span>,e);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BizException(<span class="string">"99999"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//判断是否存在异常</span></span><br><span class="line">            <span class="keyword">if</span>(!errMsgList.isEmpty())&#123;</span><br><span class="line">            logger.error(<span class="string">"打印线程监听处理的的异常信息的值：exceptionFlag="</span>+exceptionFlag+<span class="string">"####errMsgList的大小="</span>+errMsgList.size());</span><br><span class="line">                String errMsg=<span class="string">"MainThreadThrowExceptionInfo"</span>;</span><br><span class="line">                <span class="keyword">for</span>(String srr : errMsgList)&#123;</span><br><span class="line">                    errMsg = errMsg +<span class="string">" ： "</span>+srr;</span><br><span class="line">                &#125;</span><br><span class="line">                logger.error(errMsg);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BizException(<span class="string">"99999"</span>,JacksonUtils.obj2Json(errMsg));</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭线程池</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != eventExecutorGroup) &#123;</span><br><span class="line">            logger.error(<span class="string">"开始回收线程池！！！！线程池信息："</span>+eventExecutorGroup.toString());</span><br><span class="line">                eventExecutorGroup.shutdownGracefully();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@title</span>查询需要处理的数据list抽象方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> legPerCod</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> talDep</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> opnDep</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> batDate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> List <span class="title">findDataList</span><span class="params">(String legPerCod, String talDep, String opnDep,String batDate)</span></span>;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@title</span>处理单条数据的抽象方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> batDate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doSingleThread</span><span class="params">(Object obj,String batDate,Integer listCount)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@title</span>添加异常监听事件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> future</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span>  <span class="keyword">void</span> <span class="title">addListener</span><span class="params">(Future&lt;Boolean&gt; future,CountDownLatch latch)</span> </span>&#123;</span><br><span class="line">        future.addListener(<span class="keyword">new</span> GenericFutureListener&lt;Future&lt;Boolean&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationComplete</span><span class="params">(Future&lt;Boolean&gt; future)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//正常返回值</span></span><br><span class="line">                    future.get();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                    <span class="comment">//异常捕获处理</span></span><br><span class="line">                    exceptionFlag = <span class="keyword">true</span>;</span><br><span class="line">                    logger.error(<span class="string">"SubThreadThrowExceptionInfo:"</span>+e);</span><br><span class="line">                    <span class="keyword">if</span>(e <span class="keyword">instanceof</span> BizException)&#123;</span><br><span class="line">                        BizException bex = (BizException)e; </span><br><span class="line">                        String errCod = bex.getErrCode();</span><br><span class="line">                        String errMsg = <span class="string">""</span>;</span><br><span class="line">                        <span class="keyword">if</span>(!StringUtils.isBlank(bex.getMessage()))&#123;</span><br><span class="line">                            errMsg = bex.getMessage();</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            errMsg = ExceptionMessageHelper.getExMsg(errCod);</span><br><span class="line">                        &#125;</span><br><span class="line">                        </span><br><span class="line">                        errMsgList.add(errCod+<span class="string">":"</span>+errMsg+<span class="string">":"</span>+e.toString());</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        errMsgList.add(e.toString());</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">                    <span class="comment">//计数器减一</span></span><br><span class="line">                    latch.countDown();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 多线程 高并发 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Master-Worker多线程模式</title>
      <link href="/2018/10/13/Master-Worker%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/10/13/Master-Worker%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="Master类"><a href="#Master类" class="headerlink" title="Master类"></a>Master类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.com.git.yaohui.MasterWorkerModel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentLinkedQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Master</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> workerCount = Runtime.getRuntime().availableProcessors();<span class="comment">//获取当前系统可用的线程数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//private int workerCount = 10;</span></span><br><span class="line"><span class="comment">//1 有一个盛放任务的容器</span></span><br><span class="line"><span class="keyword">private</span> ConcurrentLinkedQueue&lt;Task&gt; workQueue = <span class="keyword">new</span> ConcurrentLinkedQueue&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2 需要有一个盛放worker的集合</span></span><br><span class="line"><span class="keyword">private</span> HashMap&lt;String, Thread&gt; workers = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3 需要有一个盛放每一个worker执行任务的结果集合</span></span><br><span class="line"><span class="keyword">private</span> ConcurrentHashMap&lt;String, Object&gt; resultMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//4 构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Master</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"处理任务的线程数："</span> + workerCount);</span><br><span class="line">Worker worker = <span class="keyword">new</span> Worker();</span><br><span class="line">worker.setWorkQueue(<span class="keyword">this</span>.workQueue);</span><br><span class="line">worker.setResultMap(<span class="keyword">this</span>.resultMap);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; workerCount; i ++)&#123;</span><br><span class="line"><span class="keyword">this</span>.workers.put(Integer.toString(i), <span class="keyword">new</span> Thread(worker));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5 需要一个提交任务的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submit</span><span class="params">(Task task)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.workQueue.add(task);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//6 需要有一个执行的方法，启动所有的worker方法去执行任务</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;String, Thread&gt; me : workers.entrySet())&#123;</span><br><span class="line">me.getValue().start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//7 判断是否运行结束的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;String, Thread&gt; me : workers.entrySet())&#123;</span><br><span class="line"><span class="keyword">if</span>(me.getValue().getState() != Thread.State.TERMINATED)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//8 计算结果方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> priceResult = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;String, Object&gt; me : resultMap.entrySet())&#123;</span><br><span class="line">priceResult += (Integer)me.getValue();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> priceResult;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Worker类"><a href="#Worker类" class="headerlink" title="Worker类"></a>Worker类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.com.git.yaohui.MasterWorkerModel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentLinkedQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ConcurrentLinkedQueue&lt;Task&gt; workQueue;</span><br><span class="line"><span class="keyword">private</span> ConcurrentHashMap&lt;String, Object&gt; resultMap;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWorkQueue</span><span class="params">(ConcurrentLinkedQueue&lt;Task&gt; workQueue)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.workQueue = workQueue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResultMap</span><span class="params">(ConcurrentHashMap&lt;String, Object&gt; resultMap)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.resultMap = resultMap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">Task input = <span class="keyword">this</span>.workQueue.poll();</span><br><span class="line"><span class="keyword">if</span>(input == <span class="keyword">null</span>) <span class="keyword">break</span>;</span><br><span class="line">Object output = handle(input);</span><br><span class="line"><span class="keyword">this</span>.resultMap.put(Integer.toString(input.getId()), output);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">handle</span><span class="params">(Task input)</span> </span>&#123;</span><br><span class="line">Object output = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//处理任务的耗时。。 比如说进行操作数据库。。。</span></span><br><span class="line">Thread.sleep(<span class="number">500</span>);</span><br><span class="line">output = input.getPrice();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Task类"><a href="#Task类" class="headerlink" title="Task类"></a>Task类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.com.git.yaohui.MasterWorkerModel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> price ;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Main类"><a href="#Main类" class="headerlink" title="Main类"></a>Main类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.com.git.yaohui.MasterWorkerModel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Master master = <span class="keyword">new</span> Master();</span><br><span class="line"></span><br><span class="line">Random r = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)&#123;</span><br><span class="line">Task t = <span class="keyword">new</span> Task();</span><br><span class="line">t.setId(i);</span><br><span class="line">t.setPrice(r.nextInt(<span class="number">1000</span>));</span><br><span class="line">master.submit(t);</span><br><span class="line">&#125;</span><br><span class="line">master.execute();</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(master.isComplete())&#123;</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis() - start;</span><br><span class="line"><span class="keyword">int</span> priceResult = master.getResult();</span><br><span class="line">System.out.println(<span class="string">"最终结果："</span> + priceResult + <span class="string">", 执行时间："</span> + end);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">处理任务的线程数：<span class="number">4</span></span><br><span class="line">最终结果：<span class="number">47748</span>, 执行时间：<span class="number">12581</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mysql性能优化</title>
      <link href="/2018/09/28/mysql%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/2018/09/28/mysql%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库优化的目的"><a href="#数据库优化的目的" class="headerlink" title="数据库优化的目的"></a>数据库优化的目的</h2><h3 id="1-避免出现页面访问错误"><a href="#1-避免出现页面访问错误" class="headerlink" title="1.避免出现页面访问错误"></a>1.避免出现页面访问错误</h3><ul><li>由于数据库连接timeout产生页面5XX错误</li><li>由于慢查询造成页面无法加载</li><li>由于阻塞造成数据无法提交<h3 id="2-增加数据库的稳定性"><a href="#2-增加数据库的稳定性" class="headerlink" title="2.增加数据库的稳定性"></a>2.增加数据库的稳定性</h3></li><li>很多数据库问题都是由于低效的查询引起的<h3 id="3-优化用户体验"><a href="#3-优化用户体验" class="headerlink" title="3.优化用户体验"></a>3.优化用户体验</h3></li><li>流畅页面的访问速度</li><li>良好的网站功能体验</li></ul><h2 id="数据库优化的方面"><a href="#数据库优化的方面" class="headerlink" title="数据库优化的方面"></a>数据库优化的方面</h2><p><img src="/2018/09/28/mysql性能优化/1.png" alt="数据库优化的方面"></p><h2 id="SQL以及索引优化"><a href="#SQL以及索引优化" class="headerlink" title="SQL以及索引优化"></a>SQL以及索引优化</h2><h3 id="1-如何发现有问题的sql？"><a href="#1-如何发现有问题的sql？" class="headerlink" title="1. 如何发现有问题的sql？"></a>1. 如何发现有问题的sql？</h3><p>使用Mysql慢查询日志对有效率问题的sql进行监控：</p><ul><li>查看是否开启慢查询日志 ：<code>show variables like &#39;slow_query_log&#39;</code></li><li>设置开启慢查询日志：<code>set variables slow_query_log=on</code></li><li>查看慢查询日志文件位置：<code>show variables like &#39;slow_query_log_file&#39;</code></li><li>设置慢查询日志文件的位置：<code>set global slow_query_log_file=&#39;/home/mysql/sql_log/mysql-slow.log&#39;</code></li><li>设置没有使用到索引的记录到慢查询日志 ：<code>set global log_queries_not_using_indexes=on</code></li><li>查看超过多长时间的sql进行记录到慢查询日志： <code>show variables like &#39;long_query_time&#39;</code></li><li>设置慢查询的时间（单位：秒）（大于1s的查询记录到慢查询日志中）： <code>set long_query_time=1</code></li></ul><h3 id="2-慢查询日志的存储格式："><a href="#2-慢查询日志的存储格式：" class="headerlink" title="2. 慢查询日志的存储格式："></a>2. 慢查询日志的存储格式：</h3><p>慢查询日志所包含的内容：<br>执行sql的主机信息：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># <span class="selector-tag">User</span>@<span class="selector-tag">Host</span><span class="selector-pseudo">:root</span><span class="selector-attr">[root]</span> @ <span class="selector-tag">localhost</span> <span class="selector-attr">[]</span></span><br></pre></td></tr></table></figure><p>sql的执行信息：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># <span class="selector-tag">Query_time</span><span class="selector-pseudo">:0.000024</span>  <span class="selector-tag">Lock_time</span><span class="selector-pseudo">:0.000000</span>  <span class="selector-tag">Rows_sent</span><span class="selector-pseudo">:0</span> <span class="selector-tag">Rows_examined</span><span class="selector-pseudo">:0</span></span><br></pre></td></tr></table></figure><p>sql的执行时间：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET timestamp=1402389328</span><br></pre></td></tr></table></figure><p>sql内容：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">select</span> <span class="selector-tag">CONCAT</span>(<span class="string">'storage engine:'</span>,<span class="variable">@@storage_engine</span>) <span class="selector-tag">as</span> <span class="selector-tag">INFO</span>;</span><br></pre></td></tr></table></figure><h3 id="3-慢查询日志分析工具"><a href="#3-慢查询日志分析工具" class="headerlink" title="3. 慢查询日志分析工具"></a>3. 慢查询日志分析工具</h3><ol><li>mysqldumpslow（mysql官方慢查询日志分析工具）</li><li>pt-query-digest<br> 输出到文件：<code>pt-query-digest slow-log &gt; slow_log.report</code><br> 输出到数据库表：<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">pt-query-digest</span> <span class="selector-tag">slow</span><span class="selector-class">.log</span> <span class="selector-tag">-review</span> \</span><br><span class="line">h=127.0.0.1,D=test,p=root,P=3306,u=root,t=query_review \</span><br><span class="line"><span class="selector-tag">--</span> <span class="selector-tag">create-reviewtable</span>\</span><br><span class="line">-- review-history t= hostname_slow</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-通过慢查询日志分析有问题的sql"><a href="#4-通过慢查询日志分析有问题的sql" class="headerlink" title="4. 通过慢查询日志分析有问题的sql"></a>4. 通过慢查询日志分析有问题的sql</h3><ol><li>查询次数多且每次查询占用时间长的sql<br> 通常为pt-query-digest分析的前几个查询</li><li>IO大的sql<br> 注意pt-query-digest分析中的Rows examine项</li><li>未命中索引的sql<br> 注意pt-query-digest分析中Rows examine和Rows Send的对比<br> （Rows examine表示扫描的行数，Rows Send表示实际发送出来的行数）<h3 id="5-如何分析sql查询"><a href="#5-如何分析sql查询" class="headerlink" title="5. 如何分析sql查询"></a>5. 如何分析sql查询</h3>使用explain或者desc查询sql的执行计划：</li></ol><p><img src="/2018/09/28/mysql性能优化/12.png" alt="sql执行计划"></p><p>explain各列的含义:</p><ul><li>table：显示这一行的数据是关于哪张表的</li><li>type：这是重要的列，显示连接使用了何种类型。最好到最差的连接类型为：const、eq_reg、ref、range、index、all<ul><li>const：常数查找，一般对于主键或唯一索引都是常数查找</li><li>eq_reg：是一种范围查找，一般是对于主键或唯一索引的范围查找</li><li>ref：常见于连接的查询中，比如一个表是基于某一个索引的查找</li><li>range：是基于索引的范围查找</li><li>index：是对于索引的扫描</li><li>all：对表扫描</li></ul></li><li>possible_key：显示可能应用到这张表中的索引。如果为空，没有可能的索引</li><li>key：实际使用的索引。如果为null，则没有使用索引</li><li>key_len：使用的索引的长度。在不损失精确性的情况下，长度越短越好</li><li>ref：显示索引的哪一列被使用了，如果可能的话，是一个常数</li><li>rows：mysql认为必须检查的用来返回请求数据的行数</li><li>extra：这一列中需要注意的返回值：<ul><li>Using filesort：看到这个的时候，查询就需要优化了。mysql需要进行额外的步骤来发现如何对返回的行排序。它根据连接类型以及存储排序键值和匹配条件的全部行的行指针来排序全部行。</li><li>Using temporary：看到这个的时候，查询需要优化了。这里，mysql需要创建一个临时表来存储结果，这通常发生在对不同的列集进行order by上，而不是group by上。</li></ul></li></ul><h3 id="6-sql优化的例子："><a href="#6-sql优化的例子：" class="headerlink" title="6. sql优化的例子："></a>6. sql优化的例子：</h3><ol><li>count()和max()的优化方法:</li></ol><p><img src="/2018/09/28/mysql性能优化/2.png" alt="优化前执行计划"><br><strong>优化方法：</strong><br>对count或者max的列加索引：<code>create index idx_payment_date on payment(payment_date);</code></p><p><img src="/2018/09/28/mysql性能优化/3.png" alt="优化后执行计划"></p><p>注意：count的常犯错误：count(*)的结果是包含null的，count(列名)的结果是不包含该列为null的。</p><ol start="2"><li>子查询的优化：<br> 通常情况下，需要把子查询优化为join查询，但在优化时要注意关联键是否有一对多的关系，要注意重复数据。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t <span class="keyword">where</span> t.id <span class="keyword">in</span> (<span class="keyword">select</span> t1.id <span class="keyword">from</span> t1);</span><br></pre></td></tr></table></figure></li></ol><p>优化后：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> t.* <span class="keyword">from</span> t <span class="keyword">join</span> t1 <span class="keyword">where</span> t.id=t1.id;</span><br></pre></td></tr></table></figure><ol start="3"><li>group by的优化：</li></ol><p>查询每个演员所参演的电影的数量：</p><p><img src="/2018/09/28/mysql性能优化/4.png" alt="优化前执行计划"></p><p>优化后：</p><p><img src="/2018/09/28/mysql性能优化/5.png" alt="优化后执行计划"></p><ol start="4"><li>limit的优化：</li></ol><p>limit常用于分页处理，时常会伴随order by从句使用，因此大多时候会使用Filesorts这样会造成大量的IO问题。</p><p><img src="/2018/09/28/mysql性能优化/6.png" alt="优化前执行计划"></p><p>优化方法1：使用有索引的列或主键进行order by操作</p><p><img src="/2018/09/28/mysql性能优化/7.png" alt="优化后执行计划"></p><p>优化方法2：记录上次返回的主键，在下次查询时使用主键过滤</p><p><img src="/2018/09/28/mysql性能优化/8.png" alt="再次优化后执行计划"></p><h3 id="7-如何选择合适的列建立索引"><a href="#7-如何选择合适的列建立索引" class="headerlink" title="7. 如何选择合适的列建立索引"></a>7. 如何选择合适的列建立索引</h3><ol><li>在where从句，group by从句，order by从句，on从句中出现的列</li><li>索引字段越小越好</li><li>离散度大的列放到联合索引的前面<br>eg：</li></ol><p><img src="/2018/09/28/mysql性能优化/9.png" alt="优化前"></p><p>这里index(staff_id,customer_id)和index(customer_id,staff_id)两个索引那个更好呢？<br>答：取决于staff_id和customer_id列的离散度，离散度越高的放到联合索引的前边</p><p>如何判断列的离散程度：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> customer_id),<span class="keyword">count</span>(<span class="keyword">distinct</span> staff_id) <span class="keyword">from</span> payment;</span><br></pre></td></tr></table></figure><p><img src="/2018/09/28/mysql性能优化/10.png" alt="enter description here"></p><p>统计的列的数据越大，离散度越高。<br>这里由于customer_id的离散度更大，所以应该创建index(customer_id,staff_id)的联合索引</p><h3 id="8-索引的维护和优化"><a href="#8-索引的维护和优化" class="headerlink" title="8. 索引的维护和优化"></a>8. 索引的维护和优化</h3><p>使用pt-duplicate-key-checker工具查询重复及冗余索引：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pt-duplicate-key-checker -uroot -p123 -h127.0.0.1</span><br></pre></td></tr></table></figure><h2 id="表结构的优化"><a href="#表结构的优化" class="headerlink" title="表结构的优化"></a>表结构的优化</h2><h3 id="1-选择合适的数据类型"><a href="#1-选择合适的数据类型" class="headerlink" title="1. 选择合适的数据类型"></a>1. 选择合适的数据类型</h3><ol><li>使用可以存下你的数据的最小的数据类型</li><li>使用简单的数据类型。Int要比varchar类型在mysql处理上简单</li><li>尽可能的使用 not null 定义字段，并给出默认值</li><li>尽量少用text类型，非用不可时最好考虑分表</li></ol><p>使用int来存储日期时间，利用from_unixtime()和unix_timestamp()两个函数来进行转换。<br>eg:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">test</span>(<span class="keyword">id</span> <span class="built_in">int</span> auto_increment <span class="keyword">not</span> <span class="literal">null</span>,timstr <span class="built_in">int</span>, primary <span class="keyword">key</span>(<span class="keyword">id</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">test</span>(timestr) <span class="keyword">values</span> (<span class="keyword">unix_timestamp</span>(<span class="string">'2018-09-05'</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> from_unixtime(timestr) <span class="keyword">from</span> <span class="keyword">test</span>;</span><br></pre></td></tr></table></figure><p>使用bigint来存储ip地址，利用inet_aton(),inet_ntoa()两个函数来进行转换。<br>eg:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> sessions(<span class="keyword">id</span> <span class="built_in">int</span> auto_increment <span class="keyword">not</span> <span class="literal">null</span>,ipaddress <span class="built_in">bigint</span>,primary <span class="keyword">key</span>(<span class="keyword">id</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> sessions(ipaddress) <span class="keyword">values</span> (<span class="keyword">inet_aton</span>(<span class="string">'192.168.1.1'</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">inet_ntoa</span>(ipaddress) <span class="keyword">from</span> sessions;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
